import pandas as pdimport osfrom skimage.transform import resizefrom skimage.io import imreadimport numpy as npimport matplotlib.pyplot as pltfrom sklearn import svmfrom sklearn.neighbors import KNeighborsClassifierfrom sklearn.model_selection import GridSearchCVfrom sklearn.model_selection import train_test_splitfrom sklearn.ensemble import VotingClassifierfrom sklearn.metrics import accuracy_scorefrom sklearn.metrics import classification_reportCategories=['cats','dogs']flat_data_arr=[] #input arraytarget_arr=[] #output arraydatadir='/Users/marcusdibattista/UGA/Fall 2023/archive/dataset/test_set/'#path which contains all the categories of imagesfor i in Categories:		print(f'loading... category : {i}')	path=os.path.join(datadir,i)	for img in os.listdir(path):		img_array=imread(os.path.join(path,img))		img_resized=resize(img_array,(150,150,3))		flat_data_arr.append(img_resized.flatten())		target_arr.append(Categories.index(i))	print(f'loaded category:{i} successfully')flat_data=np.array(flat_data_arr)target=np.array(target_arr)#dataframedf=pd.DataFrame(flat_data)df['Target']=targetdf.shapeprint("#input data")x=df.iloc[:,:-1]print("#output data")y=df.iloc[:,-1]print("# Splitting the data into training and testing sets")x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.20,random_state=77,	stratify=y)print("# Defining the parameters grid for GridSearchCV")param_grid={'C':[0.1,1,10,100],'gamma':[0.0001,0.001,0.1,1],'kernel':['rbf','poly']}# Define the k-NN classifier with the desired number of neighbors (k)knn = KNeighborsClassifier(n_neighbors=5)  # You can adjust the number of neighbors (k) as needed# Define the SVM classifiersvc = svm.SVC(probability=True, kernel='rbf', C=1, gamma=0.001)# Create a Voting Classifier that combines the predictions of k-NN and SVMvoting_classifier = VotingClassifier(estimators=[('knn', knn), ('svc', svc)], voting='soft')print("# Creating a model using GridSearchCV with the parameters grid")model=GridSearchCV(svc,param_grid)# Train the Voting Classifier using the training datavoting_classifier.fit(x_train, y_train)print("# Testing the model using the testing data")y_pred = model.predict(x_test)print("# Calculating the accuracy of the model")accuracy = accuracy_score(y_pred, y_test)print(f"The model is {accuracy*100}% accurate")print(classification_report(y_test, y_pred, target_names=['cat', 'dog']))path='/Users/marcusdibattista/UGA/Fall 2023/archive/dataset/test_set/dogs/dog.4001.jpg'img=imread(path)plt.imshow(img)plt.show()img_resize=resize(img,(150,150,3))l=[img_resize.flatten()]probability=model.predict_proba(l)for ind,val in enumerate(Categories):	print(f'{val} = {probability[0][ind]*100}%')print("The predicted image is : "+Categories[model.predict(l)[0]])